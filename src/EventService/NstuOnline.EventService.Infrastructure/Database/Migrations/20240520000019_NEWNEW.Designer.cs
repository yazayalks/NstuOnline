// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NstuOnline.EventService.Infrastructure.Database;

#nullable disable

namespace NstuOnline.EventService.Infrastructure.Database.Migrations
{
    [DbContext(typeof(EventContext))]
    [Migration("20240520000019_NEWNEW")]
    partial class NEWNEW
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AttachmentTypeId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentTypeId");

                    b.ToTable("attachment", (string)null);
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.AttachmentType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("attachment_type", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Code = "document",
                            Name = "Документ"
                        },
                        new
                        {
                            Id = (byte)2,
                            Code = "photo",
                            Name = "Фото"
                        });
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte>("EventStatusId")
                        .HasColumnType("smallint");

                    b.Property<byte>("EventTypeId")
                        .HasColumnType("smallint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("EventStatusId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("event", (string)null);
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.EventMember", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.HasKey("EventId", "MemberId");

                    b.HasIndex("MemberId");

                    b.ToTable("event_member", (string)null);
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.EventStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("event_status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Code = "pending",
                            Name = "В ожидании"
                        },
                        new
                        {
                            Id = (byte)2,
                            Code = "started",
                            Name = "Началось"
                        },
                        new
                        {
                            Id = (byte)3,
                            Code = "ended",
                            Name = "Закончилось"
                        });
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.EventType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("event_type", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Code = "olympics",
                            Name = "Олимпиада"
                        },
                        new
                        {
                            Id = (byte)2,
                            Code = "hackathon",
                            Name = "Хакатон"
                        },
                        new
                        {
                            Id = (byte)3,
                            Code = "conference",
                            Name = "Конференция"
                        },
                        new
                        {
                            Id = (byte)4,
                            Code = "holiday",
                            Name = "Праздник"
                        },
                        new
                        {
                            Id = (byte)5,
                            Code = "concert",
                            Name = "Концерт"
                        });
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("MemberStatusId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MemberStatusId");

                    b.ToTable("member", (string)null);
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.MemberStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("member_status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Code = "go",
                            Name = "Пойду"
                        },
                        new
                        {
                            Id = (byte)2,
                            Code = "maybe_go",
                            Name = "Возможно пойду"
                        },
                        new
                        {
                            Id = (byte)3,
                            Code = "assigned",
                            Name = "Назначено"
                        },
                        new
                        {
                            Id = (byte)4,
                            Code = "not_go",
                            Name = "Не пойду"
                        });
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.Topic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EventId1")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("EventId1");

                    b.ToTable("topic", (string)null);
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.TopicAttachment", b =>
                {
                    b.Property<Guid>("TopicId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("TopicId1")
                        .HasColumnType("uuid");

                    b.HasKey("TopicId", "AttachmentId");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("TopicId1");

                    b.ToTable("topic_attachment", (string)null);
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.Attachment", b =>
                {
                    b.HasOne("NstuOnline.EventService.Domain.Entity.AttachmentType", "AttachmentType")
                        .WithMany()
                        .HasForeignKey("AttachmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttachmentType");
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.Event", b =>
                {
                    b.HasOne("NstuOnline.EventService.Domain.Entity.EventStatus", "EventStatus")
                        .WithMany()
                        .HasForeignKey("EventStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NstuOnline.EventService.Domain.Entity.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EventStatus");

                    b.Navigation("EventType");
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.EventMember", b =>
                {
                    b.HasOne("NstuOnline.EventService.Domain.Entity.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NstuOnline.EventService.Domain.Entity.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.Member", b =>
                {
                    b.HasOne("NstuOnline.EventService.Domain.Entity.MemberStatus", "MemberStatus")
                        .WithMany()
                        .HasForeignKey("MemberStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MemberStatus");
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.Topic", b =>
                {
                    b.HasOne("NstuOnline.EventService.Domain.Entity.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NstuOnline.EventService.Domain.Entity.Event", null)
                        .WithMany("Topics")
                        .HasForeignKey("EventId1");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.TopicAttachment", b =>
                {
                    b.HasOne("NstuOnline.EventService.Domain.Entity.Attachment", "Attachment")
                        .WithMany("Topics")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NstuOnline.EventService.Domain.Entity.Topic", null)
                        .WithMany("Attachments")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NstuOnline.EventService.Domain.Entity.Topic", "Topic")
                        .WithMany()
                        .HasForeignKey("TopicId1");

                    b.Navigation("Attachment");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.Attachment", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.Event", b =>
                {
                    b.Navigation("Topics");
                });

            modelBuilder.Entity("NstuOnline.EventService.Domain.Entity.Topic", b =>
                {
                    b.Navigation("Attachments");
                });
#pragma warning restore 612, 618
        }
    }
}
