// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NstuOnline.AlbumService.Infrastructure.Database;

#nullable disable

namespace NstuOnline.AlbumService.Infrastructure.Database.Migrations
{
    [DbContext(typeof(AlbumContext))]
    [Migration("20240519235119_newNew")]
    partial class newNew
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NstuOnline.AlbumService.Domain.Entity.Album", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("album", (string)null);
                });

            modelBuilder.Entity("NstuOnline.AlbumService.Domain.Entity.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AlbumId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.ToTable("attachment", (string)null);
                });

            modelBuilder.Entity("NstuOnline.AlbumService.Domain.Entity.AttachmentUser", b =>
                {
                    b.Property<Guid>("AttachmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("AttachmentId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("attachment_user", (string)null);
                });

            modelBuilder.Entity("NstuOnline.AlbumService.Domain.Entity.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("UserId");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("NstuOnline.AlbumService.Domain.Entity.Attachment", b =>
                {
                    b.HasOne("NstuOnline.AlbumService.Domain.Entity.Album", null)
                        .WithMany("Attachments")
                        .HasForeignKey("AlbumId");
                });

            modelBuilder.Entity("NstuOnline.AlbumService.Domain.Entity.AttachmentUser", b =>
                {
                    b.HasOne("NstuOnline.AlbumService.Domain.Entity.Attachment", "Attachment")
                        .WithMany("Users")
                        .HasForeignKey("AttachmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NstuOnline.AlbumService.Domain.Entity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attachment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("NstuOnline.AlbumService.Domain.Entity.Album", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("NstuOnline.AlbumService.Domain.Entity.Attachment", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
