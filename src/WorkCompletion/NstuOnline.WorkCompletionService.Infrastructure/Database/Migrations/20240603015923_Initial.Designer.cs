// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using NstuOnline.WorkCompletion.Infrastructure.Database;

#nullable disable

namespace NstuOnline.WorkCompletion.Infrastructure.Database.Migrations
{
    [DbContext(typeof(WorkCompletionContext))]
    [Migration("20240603015923_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NstuOnline.WorkCompletion.Domain.Entity.Attachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<byte>("AttachmentTypeId")
                        .HasColumnType("smallint");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("WorkId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("WorkId");

                    b.ToTable("attachment", (string)null);
                });

            modelBuilder.Entity("NstuOnline.WorkCompletion.Domain.Entity.Favorites", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("favorites", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Code = "do_it_later",
                            Name = "Сделать позже"
                        },
                        new
                        {
                            Id = (byte)2,
                            Code = "check_later",
                            Name = "Проверить позже"
                        },
                        new
                        {
                            Id = (byte)3,
                            Code = "specify",
                            Name = "Уточнить"
                        },
                        new
                        {
                            Id = (byte)4,
                            Code = "agree",
                            Name = "Соглосовать"
                        });
                });

            modelBuilder.Entity("NstuOnline.WorkCompletion.Domain.Entity.Work", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("SyllabusSubjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.ToTable("work", (string)null);
                });

            modelBuilder.Entity("NstuOnline.WorkCompletion.Domain.Entity.WorkCompletion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<byte>("ChatStatusId")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ExternalId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte?>("FavoritesId")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("ResultId")
                        .HasColumnType("uuid");

                    b.Property<byte>("StatusId")
                        .HasColumnType("smallint");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WorkId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatStatusId");

                    b.HasIndex("ExternalId")
                        .IsUnique();

                    b.HasIndex("FavoritesId");

                    b.HasIndex("ResultId");

                    b.HasIndex("StatusId");

                    b.HasIndex("WorkId");

                    b.ToTable("work_completion", (string)null);
                });

            modelBuilder.Entity("NstuOnline.WorkCompletion.Domain.Entity.WorkCompletionChatStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("work_completion_chat_status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Code = "no_chat",
                            Name = "Нет диалога"
                        },
                        new
                        {
                            Id = (byte)2,
                            Code = "new_message",
                            Name = "Новое сообщение"
                        },
                        new
                        {
                            Id = (byte)3,
                            Code = "read",
                            Name = "Прочитано"
                        },
                        new
                        {
                            Id = (byte)4,
                            Code = "sent",
                            Name = "Отправлено"
                        },
                        new
                        {
                            Id = (byte)5,
                            Code = "awaiting_response",
                            Name = "Ожидает ответа"
                        });
                });

            modelBuilder.Entity("NstuOnline.WorkCompletion.Domain.Entity.WorkCompletionHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AttemptNumber")
                        .HasColumnType("integer");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ResultId")
                        .HasColumnType("uuid");

                    b.Property<byte>("StatusId")
                        .HasColumnType("smallint");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WorkCompletionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.HasIndex("StatusId");

                    b.HasIndex("WorkCompletionId");

                    b.ToTable("work_completion_history", (string)null);
                });

            modelBuilder.Entity("NstuOnline.WorkCompletion.Domain.Entity.WorkCompletionResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool?>("IsPassed")
                        .HasColumnType("boolean");

                    b.Property<byte?>("Mark")
                        .HasColumnType("smallint");

                    b.Property<byte?>("Percent")
                        .HasColumnType("smallint");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("work_completion_result", (string)null);
                });

            modelBuilder.Entity("NstuOnline.WorkCompletion.Domain.Entity.WorkCompletionStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("smallint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("work_completion_status", (string)null);

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Code = "not_issued",
                            Name = "Не выдано"
                        },
                        new
                        {
                            Id = (byte)2,
                            Code = "issued",
                            Name = "Выдано"
                        },
                        new
                        {
                            Id = (byte)3,
                            Code = "in_progress",
                            Name = "В работе"
                        },
                        new
                        {
                            Id = (byte)4,
                            Code = "awaiting_review",
                            Name = "Ожидает проверки"
                        },
                        new
                        {
                            Id = (byte)5,
                            Code = "under_review",
                            Name = "На проверке"
                        },
                        new
                        {
                            Id = (byte)6,
                            Code = "returned",
                            Name = "Возвращена"
                        },
                        new
                        {
                            Id = (byte)7,
                            Code = "completed",
                            Name = "Выполнена"
                        },
                        new
                        {
                            Id = (byte)8,
                            Code = "not_completed",
                            Name = "Не выполнена"
                        });
                });

            modelBuilder.Entity("NstuOnline.WorkCompletion.Domain.Entity.Attachment", b =>
                {
                    b.HasOne("NstuOnline.WorkCompletion.Domain.Entity.Work", null)
                        .WithMany("Attachments")
                        .HasForeignKey("WorkId");
                });

            modelBuilder.Entity("NstuOnline.WorkCompletion.Domain.Entity.WorkCompletion", b =>
                {
                    b.HasOne("NstuOnline.WorkCompletion.Domain.Entity.WorkCompletionChatStatus", "ChatStatus")
                        .WithMany()
                        .HasForeignKey("ChatStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NstuOnline.WorkCompletion.Domain.Entity.Favorites", "Favorites")
                        .WithMany()
                        .HasForeignKey("FavoritesId");

                    b.HasOne("NstuOnline.WorkCompletion.Domain.Entity.WorkCompletionResult", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");

                    b.HasOne("NstuOnline.WorkCompletion.Domain.Entity.WorkCompletionStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NstuOnline.WorkCompletion.Domain.Entity.Work", "Work")
                        .WithMany()
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatStatus");

                    b.Navigation("Favorites");

                    b.Navigation("Result");

                    b.Navigation("Status");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("NstuOnline.WorkCompletion.Domain.Entity.WorkCompletionHistory", b =>
                {
                    b.HasOne("NstuOnline.WorkCompletion.Domain.Entity.WorkCompletionResult", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId");

                    b.HasOne("NstuOnline.WorkCompletion.Domain.Entity.WorkCompletionStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NstuOnline.WorkCompletion.Domain.Entity.WorkCompletion", null)
                        .WithMany("Histories")
                        .HasForeignKey("WorkCompletionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Result");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("NstuOnline.WorkCompletion.Domain.Entity.Work", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("NstuOnline.WorkCompletion.Domain.Entity.WorkCompletion", b =>
                {
                    b.Navigation("Histories");
                });
#pragma warning restore 612, 618
        }
    }
}
